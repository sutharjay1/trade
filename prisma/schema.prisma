// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid()) @db.Uuid
  name          String
  email         String     @unique
  avatar        String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  UserKite      UserKite[]
  isKiteVerfied Boolean    @default(false)

  @@index([email])
  @@index([createdAt])
}

model UserKite {
  id            String           @id @default(uuid()) @db.Uuid
  kiteId        String           @unique
  userType      String
  broker        BrokerType
  exchanges     String[]
  products      String[]
  orderTypes    String[]
  email         String
  userName      String
  apiKey        String
  userShortname String
  accessToken   String?
  publicToken   String
  refreshToken  String?
  enctoken      String
  loginTime     DateTime
  portfolio     Portfolio[]
  dematConsent  DematConsentType
  User          User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?          @db.Uuid

  @@map("User_Kite")
}

model Portfolio {
  id                  String   @id @default(uuid()) @db.Uuid
  tradingSymbol       String
  exchange            String
  instrumentToken     Int
  isin                String
  product             String
  price               Float
  quantity            Float
  usedQuantity        Float
  t1Quantity          Float
  realisedQuantity    Float
  authorisedQuantity  Float
  authorisedDate      DateTime @map("authorised_date")
  openingQuantity     Float
  collateralQuantity  Float
  collateralType      String   @default("")
  discrepancy         Boolean
  averagePrice        Float    @map("average_price")
  lastPrice           Float    @map("last_price")
  closePrice          Float    @map("close_price")
  pnl                 Float
  dayChange           Float    @map("day_change")
  dayChangePercentage Float    @map("day_change_percentage")

  userKiteId String   @db.Uuid
  userKite   UserKite @relation(fields: [userKiteId], references: [id], onDelete: Cascade)

  @@map("Portfolio")
}

enum BrokerType {
  INDIVIDUAL
  ZERODHA
  OTHER
}

enum DematConsentType {
  CONSENT
  NO_CONSENT
  PHYSICAL
}
